{"searchDocs":[{"title":"install Azure AD and configure on CKAN","type":0,"sectionRef":"#","url":"/ckan-docs/azure-AD/Installation","content":"","keywords":"","version":"Next"},{"title":"in this section we will learn how to install Azure AD on CKAN​","type":1,"pageTitle":"install Azure AD and configure on CKAN","url":"/ckan-docs/azure-AD/Installation#in-this-section-we-will-learn-how-to-install-azure-ad-on-ckan","content":" ","version":"Next","tagName":"h2"},{"title":"What you'll need​","type":1,"pageTitle":"install Azure AD and configure on CKAN","url":"/ckan-docs/azure-AD/Installation#what-youll-need","content":" CKAN version 2.9 or above:Azure AD version 2.0 or above:ckan-msal compatible with CKAN 2.9.6 and CKAN 2.9.7    ","version":"Next","tagName":"h3"},{"title":"Installation​","type":1,"pageTitle":"install Azure AD and configure on CKAN","url":"/ckan-docs/azure-AD/Installation#installation","content":" To install ckanext-msal:  Activate your CKAN virtual environment, for example:: . /usr/lib/ckan/default/bin/activate Install the ckanext-msal Python package into your virtual environment:: git clone https://github.com/boykoc/ckanext-msal.git cd ckanext-msal/ python setup.py develop pip install -r requirements.txt Add msal to the ckan.plugins setting in your CKAN config file (by default the config file is located at/etc/ckan/default/production.ini). Edit msal_config.py &lt;https://github.com/ongov/ckanext-msal/blob/ckan_2.9.7_compatible/ckanext/msal/msal_config.py&gt;_ and replace the generic values with your specific credentials. Restart CKAN. For example if you've deployed CKAN on Ubuntu:: sudo service supervisor restart     ","version":"Next","tagName":"h2"},{"title":"if you are using docker​","type":1,"pageTitle":"install Azure AD and configure on CKAN","url":"/ckan-docs/azure-AD/Installation#if-you-are-using-docker","content":" copy paste below code in your docker file and add msal in .env file  ### Msal ### RUN pip3 install -e git+https://github.com/ongov/ckanext-msal.git#egg=ckanext-msal COPY msal_config.py ${APP_DIR}/src/ckanext-msal/ckanext/msal/msal_config.py   then  docker compose -f docker-compose.yml build --no-cache docker compose -f docker-compose.yml up -d   ","version":"Next","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"install Azure AD and configure on CKAN","url":"/ckan-docs/azure-AD/Installation#configuration","content":" your msal_config.py should look like this  # MSAL configurations. AUTHORITY = &quot;https://login.microsoftonline.com/d0139cb0-61c2-7362-9vf8c-e229cdf0fbed&quot; CLIENT_ID = &quot;5b040eb5-a574-8464-c489bc25580d&quot; SCOPE = [&quot;User.ReadBasic.All&quot;] REDIRECT_URI = &quot;http://localhost:5000/getAToken&quot; CLIENT_SECRET = &quot;P6D8Q~jhdsuhftIqZJs7N.k~EEOl~-axC&quot; # Plugin specific configurations. EMAIL_DOMAINS = [&quot;google.com&quot;,&quot;manishacharyagmail.onmicrosoft.com&quot;]   AUTHORITY: The authority URL for your tenant. For example: https://login.microsoftonline.com/your-tenant-name.onmicrosoft.comCLIENT_ID: The application ID of your app registered in Azure AD.SCOPE: The scopes required by your app. For example: [&quot;User.ReadBasic.All&quot;].REDIRECT_URI: The redirect URI of your app. For example: http://localhost:5000/getAToken.CLIENT_SECRET: The client secret of your app.EMAIL_DOMAINS: The list of email domains that are allowed to access CKAN. For example: [&quot;google.com&quot;]. ","version":"Next","tagName":"h3"},{"title":"How to install Azure AD on CKAN","type":0,"sectionRef":"#","url":"/ckan-docs/fluent/Installation","content":"","keywords":"","version":"Next"},{"title":"in this section we will learn how to install Azure AD on CKAN​","type":1,"pageTitle":"How to install Azure AD on CKAN","url":"/ckan-docs/fluent/Installation#in-this-section-we-will-learn-how-to-install-azure-ad-on-ckan","content":" ","version":"Next","tagName":"h2"},{"title":"What you'll need​","type":1,"pageTitle":"How to install Azure AD on CKAN","url":"/ckan-docs/fluent/Installation#what-youll-need","content":" CKAN version 2.9 or above:Azure AD version 2.0 or above:ckan-msal compatible with CKAN 2.9.6 and CKAN 2.9.7 ","version":"Next","tagName":"h3"},{"title":"install harvester and configure on CKAN","type":0,"sectionRef":"#","url":"/ckan-docs/harvester/Installation","content":"","keywords":"","version":"Next"},{"title":"in this section we will learn how to install and configure harvester on CKAN​","type":1,"pageTitle":"install harvester and configure on CKAN","url":"/ckan-docs/harvester/Installation#in-this-section-we-will-learn-how-to-install-and-configure-harvester-on-ckan","content":" ","version":"Next","tagName":"h3"},{"title":"What you'll need​","type":1,"pageTitle":"install harvester and configure on CKAN","url":"/ckan-docs/harvester/Installation#what-youll-need","content":" CKAN version 2.9 or above:ckanext-harvest compatible with CKAN 2.9.6 and above.    ","version":"Next","tagName":"h3"},{"title":"Installation with Docker​","type":1,"pageTitle":"install harvester and configure on CKAN","url":"/ckan-docs/harvester/Installation#installation-with-docker","content":" To install ckanext-harvest copy paste below code in your docker file.  ### harvester ### RUN pip3 install -e 'git+https://github.com/ckan/ckanext-harvest.git@master#egg=ckanext-harvest' &amp;&amp; \\ pip3 install -r ${APP_DIR}/src/ckanext-harvest/pip-requirements.txt &amp;&amp; \\ pip3 install -r ${APP_DIR}/src/ckanext-harvest/dev-requirements.txt # # Install Supervisor RUN apk update &amp;&amp; apk add --no-cache python3-dev py3-setuptools supervisor dcron busybox-extras RUN pip install --upgrade supervisor schedule future # # Copy Supervisor configuration COPY harvesting.conf /etc/supervisord.d/harvesting.conf COPY harvester.py /srv/app   your harvesting.conf file should look like this   [program:ckan_gather_consumer] command=ckan harvester gather-consumer user=root numprocs=1 stdout_logfile=/var/log/gather_consumer.log stderr_logfile=/var/log/gather_consumer.err.log autostart=true autorestart=true startsecs=10 [program:ckan_fetch_consumer] command=ckan harvester fetch-consumer user=root numprocs=1 stdout_logfile=/var/log/fetch_consumer.log stderr_logfile=/var/log/fetch_consumer.err.log autostart=true autorestart=true startsecs=10   your harvester.py file should look like this  import schedule import time import subprocess def run_harvester(): # Redirect logs to a file with open(&quot;harvester.log&quot;, &quot;a&quot;) as log_file: # Execute the command &quot;ckan harvester run&quot; and redirect stdout and stderr to the log file subprocess.run([&quot;ckan&quot;, &quot;harvester&quot;, &quot;run&quot;], stdout=log_file, stderr=log_file) # Schedule the job to run every 5 minutes schedule.every(5).minutes.do(run_harvester) # Run the scheduler continuously while True: schedule.run_pending() time.sleep(1)   in your .env file add below lines  CKAN__PLUGINS = harvest ckan_harvester CKAN__HARVEST__MQ__TYPE=redis CKAN__HARVEST__MQ__HOSTNAME=redis CKAN__HARVEST__MQ__PORT=6379 CKAN__HARVEST__MQ__REDIS_DB=0   some of the important commands to run harvester  python3 harvester.py &amp;   ","version":"Next","tagName":"h2"},{"title":"harvester official documentation​","type":1,"pageTitle":"install harvester and configure on CKAN","url":"/ckan-docs/harvester/Installation#harvester-official-documentation","content":" refer this link https://github.com/ckan/ckanext-harvest#command-line-interface  ","version":"Next","tagName":"h3"},{"title":"some above commads meaning:​","type":1,"pageTitle":"install harvester and configure on CKAN","url":"/ckan-docs/harvester/Installation#some-above-commads-meaning","content":" geather consumer: This command will gather all the harvest sources and create jobs for each of them. It will also create jobs for the harvest sources that are scheduled to run periodically.fetch consumer: This command will fetch the harvest objects for each of the jobs created by the gather consumer. It will also create jobs for the harvest objects that are scheduled to run periodically.Supervisor in Harvester: in Harvester supervisor is used to run the harvester in background. Supervisor is a client/server system that allows its users to monitor and control a number of processes on UNIX-like operating systems. It shares some of the same goals of programs like launchd, daemontools, and runit. Unlike some of these programs, it is not meant to be run as a substitute for init as “process id 1”. Instead it is meant to be used to control processes related to a project or a customer, and is meant to start like any other program at boot time.  ","version":"Next","tagName":"h3"},{"title":"creating harvest source using ckan UI​","type":1,"pageTitle":"install harvester and configure on CKAN","url":"/ckan-docs/harvester/Installation#creating-harvest-source-using-ckan-ui","content":" go to your ckan and login as admin then to /harvest page and click on Add Harvest Source buttonfill the form and click on save button  Here is an example of a configuration object (the one that must be entered in the configuration field):  { &quot;api_version&quot;: 1, &quot;default_tags&quot;: [{&quot;name&quot;: &quot;geo&quot;}, {&quot;name&quot;: &quot;namibia&quot;}], &quot;default_groups&quot;: [&quot;science&quot;, &quot;spend-data&quot;], &quot;default_extras&quot;: {&quot;encoding&quot;:&quot;utf8&quot;, &quot;harvest_url&quot;: &quot;{harvest_source_url}/dataset/{dataset_id}&quot;}, &quot;override_extras&quot;: true, &quot;organizations_filter_include&quot;: [], &quot;organizations_filter_exclude&quot;: [&quot;remote-organization&quot;], &quot;user&quot;:&quot;harverster-user&quot;, &quot;api_key&quot;:&quot;&lt;REMOTE_API_KEY&gt;&quot;, &quot;read_only&quot;: true, &quot;remote_groups&quot;: &quot;only_local&quot;, &quot;remote_orgs&quot;: &quot;create&quot; }   read more here ","version":"Next","tagName":"h3"},{"title":"How to Generate CKAN Plugin","type":0,"sectionRef":"#","url":"/ckan-docs/quick-Questions/how-to-genertate-plugin","content":"","keywords":"","version":"Next"},{"title":"What you'll need​","type":1,"pageTitle":"How to Generate CKAN Plugin","url":"/ckan-docs/quick-Questions/how-to-genertate-plugin#what-youll-need","content":" CKAN version 2.9 or above:CKAN Docker install latest version.    ","version":"Next","tagName":"h3"},{"title":"Generate CKAN Extension if you are using CKAN Docker​","type":1,"pageTitle":"How to Generate CKAN Plugin","url":"/ckan-docs/quick-Questions/how-to-genertate-plugin#generate-ckan-extension-if-you-are-using-ckan-docker","content":" You can use the ckan extension instructions to create a CKAN extension, only executing the command inside the CKAN container and setting the mounted src/ folder as output:  docker compose -f docker-compose.dev.yml exec ckan-dev /bin/sh -c &quot;ckan generate extension --output-dir /srv/app/src_extensions&quot;     The new extension files and directories are created in the /srv/app/src_extensions/ folder in the running container. They will also exist in the local src/ directory as local /src directory is mounted as /srv/app/src_extensions/ on the ckan container. You might need to change the owner of its folder to have the appropiate permissions. ","version":"Next","tagName":"h2"},{"title":"Install CKAN with Docker","type":0,"sectionRef":"#","url":"/ckan-docs/installation/install-with-docker","content":"","keywords":"","version":"Next"},{"title":"What you'll need​","type":1,"pageTitle":"Install CKAN with Docker","url":"/ckan-docs/installation/install-with-docker#what-youll-need","content":" CKAN Docker clone master branch.    ","version":"Next","tagName":"h3"},{"title":"Install CKAN with Docker​","type":1,"pageTitle":"Install CKAN with Docker","url":"/ckan-docs/installation/install-with-docker#install-ckan-with-docker-1","content":" step 1: Clone the CKAN Docker repository  git clone https://github.com/ckan/ckan-docker.git   step 2: Change directory to the CKAN Docker repository  cd ckan-docker   step 3: Create a .env file  cp .env.template .env   step 4: Edit the .env file  vim .env   step 5: modify the .env file according to your needs like:  # CKAN core CKAN_VERSION=2.10.0 CKAN_SITE_ID=default CKAN_SITE_URL=https://localhost:8443 CKAN___BEAKER__SESSION__SECRET=CHANGE_ME CKAN___API_TOKEN__JWT__ENCODE__SECRET=string:CHANGE_ME CKAN___API_TOKEN__JWT__DECODE__SECRET=string:CHANGE_ME CKAN_SYSADMIN_NAME=ckan_admin CKAN_SYSADMIN_PASSWORD=test1234 CKAN_SYSADMIN_EMAIL=your_email@example.com   step 6: Modify the Dockerfile in ckan folder   FROM ckan/ckan-base:2.10.3 # Install any extensions needed by your CKAN instance # See Dockerfile.dev for more details and examples # Copy custom initialization scripts COPY docker-entrypoint.d/* /docker-entrypoint.d/ # Apply any patches needed to CKAN core or any of the built extensions (not the # runtime mounted ones) COPY patches ${APP_DIR}/patches RUN for d in $APP_DIR/patches/*; do \\ if [ -d $d ]; then \\ for f in `ls $d/*.patch | sort -g`; do \\ cd $SRC_DIR/`basename &quot;$d&quot;` &amp;&amp; echo &quot;$0: Applying patch $f to $SRC_DIR/`basename $d`&quot;; patch -p1 &lt; &quot;$f&quot; ; \\ done ; \\ fi ; \\ done   here you can change the CKAN_VERSION according to your needs.you can also add any extensions needed by your CKAN instance.you can also add any patches needed to CKAN core or any of the built extensions (not the runtime mounted ones).  step 7: Build the CKAN image  docker-compose build   step 8: Run the CKAN image  docker-compose up -d  ","version":"Next","tagName":"h2"},{"title":"Install CKAN with Package","type":0,"sectionRef":"#","url":"/ckan-docs/installation/install-with-package","content":"","keywords":"","version":"Next"},{"title":"What you'll need​","type":1,"pageTitle":"Install CKAN with Package","url":"/ckan-docs/installation/install-with-package#what-youll-need","content":" ubunutu version 20.4CKAN DOCS official docs.  ","version":"Next","tagName":"h3"},{"title":"CKAN Installation Guide on Ubuntu 20.04​","type":1,"pageTitle":"Install CKAN with Package","url":"/ckan-docs/installation/install-with-package#ckan-installation-guide-on-ubuntu-2004","content":" Follow these steps to install CKAN on Ubuntu 20.04:  Login in as root user. If this is your first time, you will need to create a root password: sudo passwd root Login as root user, enter password when prompted: sudo -i Update ubuntu package index: sudo apt update Install Ubuntu required packages for CKAN: sudo apt install -y libpq5 redis-server nginx supervisor Download CKAN package. In this guide we are installing CKAN for Python 3: wget https://packaging.ckan.org/python-ckan_2.9-py3-focal_amd64.deb Install additional needed packages: python3 --version sudo apt-get install python3.8-distutils Install CKAN package: sudo dpkg -i python-ckan_2.9-py3-focal_amd64.deb Install PostgreSQL: sudo apt install -y postgresql Check that it installed correctly by running the following command and ensuring that the encoding of databases is UTF8: sudo -u postgres psql -l   Create a database user and create a password for the new user when prompted, replace username with the username of your choice: sudo -u postgres createuser -S -D -R -P username Create a new PostgreSQL database owned by the new user, replace ckan_default with a database name of your choice and username with the username of the user just created: sudo -u postgres createdb -O username ckan_default -E utf-8 If you do not have vim installed you will need to install it with the following: apt install vim Edit the CKAN configuration file and fill in the password, database, and database user for the database you’ve created: vim /etc/ckan/default/ckan.ini In this example our information is as follows: Username: ckanuserPassword: passwordDatabase Name: ckan_default Install Solr: sudo apt install -y solr-tomcat Change the default port Tomcat runs on to the one expected by CKAN: vim /etc/tomcat9/server.xml Edit the following line: &lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot; To: &lt;Connector port=&quot;8983&quot; protocol=&quot;HTTP/1.1&quot; Replace the default schema.xml file with a symlink to the CKAN schema file: sudo mv /etc/solr/conf/schema.xml /etc/solr/conf/schema.xml.bak sudo ln -s /usr/lib/ckan/default/src/ckan/ckan/config/solr/schema.xml /etc/solr/conf/schema.xml Restart Solr: sudo service tomcat9 restart Check that Solr is running by entering the following into your browser: http://localhost:8983/solr/ Edit the solr_url line in the CKAN configuration file to go to your Solr server: vim /etc/ckan/default/ckan.ini Example: solr_url = http://127.0.0.1:8983/solr Also edit the following options in the CKAN configuration File: site_id=ckan_defaultsite_url=http://localhost Initialize CKAN database by running the following command: sudo ckan db init Reload the Supervisor daemon so the new processes are picked up: sudo supervisorctl reload Check the status of the processes: sudo supervisorctl status The following should appear with no errors: ckan-datapusher:ckan-datapusher-00 RUNNING pid 1963, uptime 0:00:12 ckan-uwsgi:ckan-uwsgi-00 RUNNING pid 1964, uptime 0:00:12 ckan-worker:ckan-worker-00 RUNNING pid 1965, uptime 0:00:12 Restart Nginx: sudo service nginx restart Enter the following into your web browser and the CKAN front page should appear: http://localhost/   ","version":"Next","tagName":"h3"},{"title":"Congratulations! You have successfully installed CKAN!👌​","type":1,"pageTitle":"Install CKAN with Package","url":"/ckan-docs/installation/install-with-package#congratulations-you-have-successfully-installed-ckan","content":"   ","version":"Next","tagName":"h3"},{"title":"Additional CKAN Setup Steps​","type":1,"pageTitle":"Install CKAN with Package","url":"/ckan-docs/installation/install-with-package#additional-ckan-setup-steps","content":" Follow these steps to create a super user, setup file uploads, activate the CKAN virtual environment, and update the dataproxy timeout:  To create a super user in CKAN, run the following command, replacing username, email@gmail.com, and name with your desired values: ckan -c /etc/ckan/default/ckan.ini sysadmin add username email=email@gmail.com name=name Example: ckan -c /etc/ckan/default/ckan.ini sysadmin add vivek email=vivek2292@gmail.com name=vivek To setup CKAN’s FileStore with local file storage: Create the directory where CKAN will store uploaded files: sudo mkdir -p /var/lib/ckan/default Add the following line to your CKAN config file, after the [app:main] line: ckan.storage_path = /var/lib/ckan/default Set the permissions of your ckan.storage_path directory. For example if you’re running CKAN with Nginx, then the Nginx’s user (www-data on Ubuntu) must have read, write and execute permissions for the ckan.storage_path: sudo chown www-data /var/lib/ckan/default sudo chmod u+rwx /var/lib/ckan/default Restart your web server, for example to restart uWSGI on a package install: sudo supervisorctl restart ckan-uwsgi:* To activate the CKAN virtual environment: . /usr/lib/ckan/default/bin/activate To update the dataproxy timeout: Open the recline_view.js file: vim /usr/lib/ckan/default/src/ckan/ckanext/reclineview/theme/public/recline_view.js Update the following line: recline.Backend.DataProxy.timeout = 100000;   ","version":"Next","tagName":"h3"},{"title":"Note: You can also refer old docs for installation of CKAN with Package here​","type":1,"pageTitle":"Install CKAN with Package","url":"/ckan-docs/installation/install-with-package#note-you-can-also-refer-old-docs-for-installation-of-ckan-with-package-here","content":"","version":"Next","tagName":"h3"},{"title":"install Schemming on CKAN","type":0,"sectionRef":"#","url":"/ckan-docs/schemming/Installation","content":"","keywords":"","version":"Next"},{"title":"in this section we will learn how to install Schemming on CKAN​","type":1,"pageTitle":"install Schemming on CKAN","url":"/ckan-docs/schemming/Installation#in-this-section-we-will-learn-how-to-install-schemming-on-ckan","content":" ","version":"Next","tagName":"h3"},{"title":"What you'll need​","type":1,"pageTitle":"install Schemming on CKAN","url":"/ckan-docs/schemming/Installation#what-youll-need","content":" CKAN version 2.9 or above:ckanext-scheming compatible with CKAN 2.9.6 and above.official documentation of ckanext-scheming.    ","version":"Next","tagName":"h3"},{"title":"Installation with Docker​","type":1,"pageTitle":"install Schemming on CKAN","url":"/ckan-docs/schemming/Installation#installation-with-docker","content":" To install ckanext-scheming copy paste below code in your docker file.   ### Scheming ### RUN pip3 install -e 'git+https://github.com/ckan/ckanext-scheming.git@master#egg=ckanext-scheming' COPY translate.json /srv/app/src/ckanext-scheming/ckanext/scheming COPY package_form.html /srv/app/src/ckanext-scheming/ckanext/scheming/templates/scheming/package/snippets/package_form.html   add below code in your ckan.ini file  scheming.dataset_schemas = ckanext.scheming:translate.json scheming.presets = ckanext.scheming:presets.json   your translate.json file should look like this  translate.json { &quot;scheming_version&quot;: 2, &quot;dataset_type&quot;: &quot;formpages&quot;, &quot;about&quot;: &quot;A reimplementation of the default CKAN dataset schema&quot;, &quot;about_url&quot;: &quot;http://github.com/ckan/ckanext-scheming&quot;, &quot;dataset_fields&quot;: [ { &quot;start_form_page&quot;: { &quot;title&quot;: &quot;Required Fields&quot;, &quot;description&quot;: &quot;These fields provide detailed metadata about the dataset.&quot; }, &quot;field_name&quot;: &quot;title&quot;, &quot;label&quot;: &quot;Title&quot;, &quot;preset&quot;: &quot;title&quot;, &quot;form_placeholder&quot;: &quot;eg. A descriptive title&quot; }, { &quot;field_name&quot;: &quot;name&quot;, &quot;label&quot;: &quot;URL&quot;, &quot;preset&quot;: &quot;dataset_slug&quot;, &quot;form_placeholder&quot;: &quot;eg. my-dataset&quot; }, { &quot;field_name&quot;: &quot;owner_org&quot;, &quot;label&quot;: &quot;Organization&quot;, &quot;preset&quot;: &quot;dataset_organization&quot; }, { &quot;start_form_page&quot;: { &quot;title&quot;: &quot;English&quot;, &quot;description&quot;: &quot;These fields provide detailed metadata about the dataset.&quot; }, &quot;field_name&quot;: &quot;en_title&quot;, &quot;label&quot;: &quot;English Dataset Title&quot;, &quot;preset&quot;: &quot;title&quot;, &quot;form_placeholder&quot;: &quot;eg. A descriptive title&quot; }, { &quot;field_name&quot;: &quot;notes&quot;, &quot;label&quot;: &quot;English Description&quot;, &quot;form_snippet&quot;: &quot;markdown.html&quot;, &quot;form_placeholder&quot;: &quot;eg. Some useful notes about the data&quot; }, { &quot;start_form_page&quot;: { &quot;title&quot;: &quot;French dataset&quot;, &quot;description&quot;: &quot;These fields provide detailed metadata about the dataset.&quot; }, &quot;field_name&quot;: &quot;fr_title&quot;, &quot;label&quot;: &quot;Freanch Dataset Title&quot;, &quot;preset&quot;: &quot;title&quot;, &quot;form_placeholder&quot;: &quot;eg. A descriptive title&quot; }, { &quot;field_name&quot;: &quot;fr_notes&quot;, &quot;label&quot;: &quot;French Description&quot;, &quot;form_snippet&quot;: &quot;markdown.html&quot;, &quot;form_placeholder&quot;: &quot;eg. Some useful notes about the data&quot; }, { &quot;start_form_page&quot;: { &quot;title&quot;: &quot;Spanish dataset&quot;, &quot;description&quot;: &quot;These fields provide detailed metadata about the dataset.&quot; }, &quot;field_name&quot;: &quot;es_title&quot;, &quot;label&quot;: &quot;Spanish Dataset Title&quot;, &quot;preset&quot;: &quot;title&quot;, &quot;form_placeholder&quot;: &quot;eg. A descriptive title&quot; }, { &quot;field_name&quot;: &quot;es_notes&quot;, &quot;label&quot;: &quot;Spanish Description&quot;, &quot;form_snippet&quot;: &quot;markdown.html&quot;, &quot;form_placeholder&quot;: &quot;eg. Some useful notes about the data&quot; }, { &quot;start_form_page&quot;: { &quot;title&quot;: &quot;Russian dataset&quot;, &quot;description&quot;: &quot;These fields provide detailed metadata about the dataset.&quot; }, &quot;field_name&quot;: &quot;ru_title&quot;, &quot;label&quot;: &quot;Russian Dataset Title&quot;, &quot;preset&quot;: &quot;title&quot;, &quot;form_placeholder&quot;: &quot;eg. A descriptive title&quot; }, { &quot;field_name&quot;: &quot;ru_notes&quot;, &quot;label&quot;: &quot;Russian Description&quot;, &quot;form_snippet&quot;: &quot;markdown.html&quot;, &quot;form_placeholder&quot;: &quot;eg. Some useful notes about the data&quot; }, { &quot;start_form_page&quot;: { &quot;title&quot;: &quot;Chinese dataset&quot;, &quot;description&quot;: &quot;These fields provide detailed metadata about the dataset.&quot; }, &quot;field_name&quot;: &quot;zh_title&quot;, &quot;label&quot;: &quot;Chinese Dataset Title&quot;, &quot;preset&quot;: &quot;title&quot;, &quot;form_placeholder&quot;: &quot;eg. A descriptive title&quot; }, { &quot;field_name&quot;: &quot;zh_notes&quot;, &quot;label&quot;: &quot;Chinese Description&quot;, &quot;form_snippet&quot;: &quot;markdown.html&quot;, &quot;form_placeholder&quot;: &quot;eg. Some useful notes about the data&quot; }, { &quot;start_form_page&quot;: { &quot;title&quot;: &quot;Arabic dataset&quot;, &quot;description&quot;: &quot;These fields provide detailed metadata about the dataset.&quot; }, &quot;field_name&quot;: &quot;ar_title&quot;, &quot;label&quot;: &quot;Arabic Dataset Title&quot;, &quot;preset&quot;: &quot;title&quot;, &quot;form_placeholder&quot;: &quot;eg. A descriptive title&quot; }, { &quot;field_name&quot;: &quot;ar_notes&quot;, &quot;label&quot;: &quot;Arabic Description&quot;, &quot;form_snippet&quot;: &quot;markdown.html&quot;, &quot;form_placeholder&quot;: &quot;eg. Some useful notes about the data&quot; } ], &quot;resource_fields&quot;: [ { &quot;field_name&quot;: &quot;url&quot;, &quot;label&quot;: &quot;URL&quot;, &quot;preset&quot;: &quot;resource_url_upload&quot; }, { &quot;field_name&quot;: &quot;name&quot;, &quot;label&quot;: &quot;Name&quot;, &quot;form_placeholder&quot;: &quot;eg. January 2011 Gold Prices&quot; }, { &quot;field_name&quot;: &quot;description&quot;, &quot;label&quot;: &quot;Description&quot;, &quot;form_snippet&quot;: &quot;markdown.html&quot;, &quot;form_placeholder&quot;: &quot;Some useful notes about the data&quot; }, { &quot;field_name&quot;: &quot;format&quot;, &quot;label&quot;: &quot;Format&quot;, &quot;preset&quot;: &quot;resource_format_autocomplete&quot; } ] }   your package_form.html file should look like this  package_form.html {% extends 'package/new_package_form.html' %} {% block stages %} {%- set pages = h.scheming_get_dataset_form_pages(dataset_type) -%} {%- if pages -%} {%- set active_page = data.get('_form_page', 1) | int -%} &lt;ol class=&quot;stages stage-1&quot;&gt; {%- for p in pages -%} {%-set pg_url = h.url_for(dataset_type + ('.scheming_edit_page' if form_style == 'edit' else '.scheming_new_page'), package_type=dataset_type, id=data.name or data.id, page=loop.index) -%} &lt;li class=&quot;{{ 'first ' if loop.first else ''}}{{ 'active ' if loop.index == active_page else '' }}&quot; style=&quot;width:{{ 100 / (loop.length + (0 if form_style == 'edit' else 1)) }}%&quot;&gt; &lt;span class=&quot;highlight&quot; style=&quot;padding-right:0&quot;&gt; {% if '//' not in pg_url.strip() %} &lt;a href=&quot;{{ h.url_for(dataset_type + ('.scheming_edit_page' if form_style == 'edit' else '.scheming_new_page'), package_type=dataset_type, id=data.name or data.id, page=loop.index) }}&quot;&gt;{{ h.scheming_language_text(p.title) }}&lt;/a&gt; {% else %}{{ h.scheming_language_text(p.title) }}{% endif %} &lt;/span&gt; &lt;/li&gt; {%- endfor -%} {%- if form_style != 'edit' -%} &lt;li class=&quot;last {{ s2 }}&quot; style=&quot;width:{{ 100 / (pages | length + 1) }}%&quot;&gt; {% if s2 != 'complete' %} &lt;span class=&quot;highlight&quot;&gt;{{ _('Add data') }}&lt;/span&gt; {% else %} {% if s1 == 'active' %} {# stage 1 #} &lt;button class=&quot;highlight&quot; name=&quot;save&quot; value=&quot;go-resources&quot; type=&quot;submit&quot;&gt;{{ _('Add data') }}&lt;/button&gt; {% else %} {% link_for _('Add data'), named_route='dataset.new', class_=&quot;highlight&quot; %} {% endif %} {% endif %} &lt;/li&gt; {%- endif -%} &lt;/ol&gt; {%- else -%} {{ super() }} {%- endif -%} {% endblock %} {% block errors %} {%- if errors -%} {%- set schema = h.scheming_get_dataset_schema(dataset_type) -%} {%- snippet 'scheming/snippets/errors.html', errors=errors, fields=schema.dataset_fields, entity_type='dataset', object_type=dataset_type -%} {%- endif -%} {% endblock %} {% block basic_fields %} {%- if not dataset_type -%} &lt;p&gt; dataset_type not passed to template. your version of CKAN might not be compatible with ckanext-scheming &lt;/p&gt; {%- endif -%} {%- set schema = h.scheming_get_dataset_schema(dataset_type) -%} {%- set pages = h.scheming_get_dataset_form_pages(dataset_type) -%} {%- if pages -%} {%- set active_page = data.get('_form_page', 1) | int -%} {%- set fields = pages[active_page - 1]['fields'] -%} {%- else -%} {%- set fields = schema.dataset_fields -%} {%- endif -%} {%- for field in fields -%} {%- if field.form_snippet is not none -%} {%- if field.field_name not in data %} {# Set the field default value before rendering but only if it doesn't already exist in data which would mean the form has been submitted. #} {% if field.default_jinja2 %} {% do data.__setitem__( field.field_name, h.scheming_render_from_string(field.default_jinja2)) %} {% elif field.default %} {% do data.__setitem__(field.field_name, field.default) %} {% endif %} {% endif -%} {%- snippet 'scheming/snippets/form_field.html', field=field, data=data, errors=errors, licenses=c.licenses, entity_type='dataset', object_type=dataset_type -%} {%- endif -%} {%- endfor -%} {%- if pages -%} &lt;input type=&quot;hidden&quot; name=&quot;_ckan_phase&quot; value=&quot;{{ active_page }}&quot; /&gt; {%- elif 'resource_fields' not in schema -%} &lt;!-- force controller to skip resource-editing step for this type --&gt; &lt;input type=&quot;hidden&quot; name=&quot;_ckan_phase&quot; value=&quot;&quot; /&gt; {%- endif -%} {% endblock %} {% block metadata_fields %} {% endblock %} {% block save_button_text %} {%- set pages = h.scheming_get_dataset_form_pages(dataset_type) -%} {%- if pages and form_style == 'edit' -%} {%- set active_page = data.get('_form_page', 1) | int -%} {{ _('Update {page}').format(page=h.scheming_language_text(pages[active_page-1].title)) }} {%- elif pages -%} {{ _('Next') }} {%- else -%} {{ super() }} {%- endif -%} {% endblock %}  ","version":"Next","tagName":"h2"}],"options":{"id":"default"}}